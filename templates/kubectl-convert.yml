golang:build:
- name: &name kubectl-convert
  env: &env
  - name: APP
    value: *name
  - name: VERSION
    # source(git-tags): https://github.com/kubernetes/kubernetes
    value: v1.22.2

  # following envs are only meant for the manifest generation
  - name: HOMEPAGE
    value: https://github.com/kubernetes/kubernetes

  - name: SHORT_DESCRIPTION
    value: |-
      Convert manifests between different API versions

  - name: DESCRIPTION
    value@transform?str:
      value@template|http?str: |-
        {{- $ver_parts := split env.VERSION "." -}}
        https://raw.githubusercontent.com/kubernetes/website/snapshot-initial-
          {{- index $ver_parts 0 -}}.{{- index $ver_parts 1 -}}
        /content/en/docs/tasks/tools/included/kubectl-convert-overview.md
      ops:
      - template: |-
          {{- $parts := split VALUE "---\n" -}}
          {{- index $parts (add (len $parts) -1) | trimPrefix "\n" -}}

  - name: CAVEATES
    value: ""

  matrix@file: &matrix templates/matrix-kubectl-convert.yml
  hooks:
    before:
    - shell@template: |-
        [[ -d "build/src/{{- env.APP -}}" ]] && exit 0

        git clone --depth 1 --branch ${VERSION} \
          https://github.com/kubernetes/kubernetes.git \
          "build/src/{{- env.APP -}}"
    after:matrix:success:
    - shell@template: |-
        {{- $dir := printf "%s.%s.%s" env.APP matrix.kernel matrix.arch -}}

        mkdir -p build/archive
        cp build/src/{{- env.APP -}}/LICENSE build/bin/{{ $dir }}/LICENSE

        cd build/bin
        tar -zcf ../archive/{{ $dir }}.tar.gz {{ $dir }}

  chdir@template: build/src/{{- env.APP -}}
  path: ./cmd/kubectl-convert
  outputs@:
  - __@template?str: |-
      {{ $suffix := "" -}}
      {{- if eq matrix.kernel "windows" -}}
        {{ $suffix = ".exe" }}
      {{- end -}}
      ../../bin/{{- env.APP -}}.{{- matrix.kernel -}}.{{- matrix.arch -}}/{{- env.APP -}}{{- $suffix -}}

  ldflags:
  - -s -w

workflow:run@:
- name: index-kubectl-convert
  env: *env
  matrix@file: *matrix
  hooks:
    before:
    - shell: mkdir -p build/manifests
    after:matrix:success:
    - shell@file?str|template?str: templates/shell/write-blob-entry.tmpl
      env:
      - name: ENTRYPOINT
        value@template: |-
          {{- $suffix := "" -}}
          {{- if eq matrix.kernel "windows" -}}
            {{- $suffix = ".exe" -}}
          {{- end -}}
          {{- env.APP -}}{{- $suffix -}}

      - name: FILES
        value@transform?str:
          value@template?str: |-
            {{ $suffix := "" -}}
            {{- if eq matrix.kernel "windows" -}}
              {{ $suffix = ".exe" }}
            {{- end -}}
            {{- $prefix := printf "%s.%s.%s"
                  env.APP matrix.kernel matrix.arch -}}
            - from: {{ $prefix }}/{{ env.APP }}{{ $suffix }}
              to: .
            - from: {{ $prefix }}/LICENSE
              to: .
          ops:
          - template: |-
              {{ VALUE | indent 2 }}

    after:success:
    - shell@file?str|template?str: templates/shell/write-manifest.tmpl

  jobs:
  - task@template: golang:build({{ env.APP }})
